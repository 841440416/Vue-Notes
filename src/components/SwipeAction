<template>
  <div id="ag-swipe">
    <div
      class="content"
      @touchstart="touchStart"
      @touchmove="touchMove"
      @touchend="touchEnd"
      :style="deleteSlider"
    >
      <slot></slot>
    </div>
    <div class="edit active flex-column" ref="edit" @click="editClick" v-if="showEdit">编辑</div>
    <div class="remove active flex-column" ref="remove" @click="removeClick">删除</div>
  </div>
</template>
<script type="text/ecmascript-6">
const ratio = (document.documentElement.clientWidth || document.body.clientWidth) / 18.75 
export default {
  name: "ag-swipe",
  props: {
    propE: {
      type: Object,
      default: function() {}
    },
    showEdit: {
      type: Boolean,
      default: true
    },
  },
  data() {
    return {
      startX: 0, //触摸位置
      endX: 0, //结束位置
      moveX: 0, //滑动时的位置
      disX: 0, //移动距离
      deleteSlider: "" //滑动时的效果,使用v-bind:style="deleteSlider"
    };
  },

  methods: {
    editClick(value) {
      this.$emit("edit", value)
      this.deleteSlider = "transform:translateX(0px)"
    },
    removeClick(value) {
      this.$emit("remove", value)
      this.deleteSlider = "transform:translateX(0px)"
    },
    touchStart(e) {
      e = e || event
      //tounches类数组，等于1时表示此时有只有一只手指在触摸屏幕
      if (e.touches.length == 1) {
        // 记录开始位置
        this.startX = e.touches[0].clientX
      }
    },
    touchMove(e) {
      e = e || event
      //获取删除按钮的宽度，此宽度为滑块左滑的最大距离
      let wd = this.$refs.remove.offsetWidth
      if (e.touches.length == 1) {
        // 滑动时距离浏览器左侧实时距离
        this.moveX = e.touches[0].clientX
        //起始位置减去 实时的滑动的距离，得到手指实时偏移距离
        this.disX = this.startX - this.moveX
        // 如果是向右滑动或者不滑动，不改变滑块的位置
        if (this.disX < 0 || this.disX == 0) {
          this.deleteSlider = "transform:translateX(0px)"
          // 大于0，表示左滑了，此时滑块开始滑动
        } else if (this.disX > 0) {
          //具体滑动距离我取的是 手指偏移距离*5。
          this.deleteSlider = "transform:translateX(-" + this.disX * 5/ratio + "rem)"
          // 最大也只能等于删除按钮宽度
          if (this.disX * 5 >= 2 * wd) {
            this.deleteSlider = "transform:translateX(-" + 2 * wd/ratio + "rem)"
          }
        }
      }
    },
    touchEnd(e) {
      e = e || event;
      let wd = this.$refs.remove.offsetWidth;
      if (e.changedTouches.length == 1) {
        let endX = e.changedTouches[0].clientX;
        this.disX = this.startX - endX;
        //如果距离小于删除按钮一半,强行回到起点
        if (this.disX * 5 < wd / 2) {
          this.deleteSlider = "transform:translateX(0px)"
        } else {
          //大于一半 滑动到最大值
          this.deleteSlider = "transform:translateX(-" + 2 * wd/ratio + "rem)"
        }
      }
    }
  }
};
</script>
<style lang="scss" scoped>
#ag-swipe {
  width: 100%;
  height: 100%;
  position: relative;
  user-select: none;
  .content {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    background: #fff;
    padding: 0 .5rem;
    z-index: 100;
    height: 100%;
    //  设置过渡动画
    transition: 0.3s;
  }
  .edit,.remove {
    position: absolute;
    width: 3rem;
    height: 100%;
    background: #4564ff;
    right: 3rem;
    top: 0;
    color: #fff;
    text-align: center;
    font-size: 0.8rem;
  }
  .remove {
    background: #ff5b45;
    right: 0;
  }
}
</style>
